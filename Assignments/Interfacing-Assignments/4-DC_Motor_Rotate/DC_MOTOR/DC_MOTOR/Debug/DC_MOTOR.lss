
DC_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bcf  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  000010b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000578  00000000  00000000  0000174d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000321  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinValue>:
#include "UTILS.h"
#include "DIO_private.h"
#include "DIO_interface.h" 

void DIO_SetPinValue(u8 port,u8 pin_num,u8 Value){
	if(Value==HIGH){
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_SetPinValue+0x6c>
		switch(port){
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_SetPinValue+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_SetPinValue+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_SetPinValue+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_SetPinValue+0x56>
  7e:	08 95       	ret
			case Port_A:
			SET_BIT(PORTA,pin_num);
  80:	2b b3       	in	r18, 0x1b	; 27
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_SetPinValue+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_SetPinValue+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8b bb       	out	0x1b, r24	; 27
			break;
  94:	08 95       	ret
			case Port_B:
			SET_BIT(PORTB,pin_num);
  96:	28 b3       	in	r18, 0x18	; 24
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinValue+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinValue+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	88 bb       	out	0x18, r24	; 24
			break;
  aa:	08 95       	ret
			case Port_C:
			SET_BIT(PORTC,pin_num);
  ac:	25 b3       	in	r18, 0x15	; 21
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinValue+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinValue+0x48>
  bc:	82 2b       	or	r24, r18
  be:	85 bb       	out	0x15, r24	; 21
			break;
  c0:	08 95       	ret
			case Port_D:
			SET_BIT(PORTD,pin_num);
  c2:	22 b3       	in	r18, 0x12	; 18
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinValue+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinValue+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	82 bb       	out	0x12, r24	; 18
			break;
  d6:	08 95       	ret
		}
	}
	else if(Value==LOW){
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <DIO_SetPinValue+0xde>
		switch(port){
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <DIO_SetPinValue+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_SetPinValue+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <DIO_SetPinValue+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_SetPinValue+0xc8>
  ea:	08 95       	ret
			case Port_A:
			CLR_BIT(PORTA,pin_num);
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinValue+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinValue+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8b bb       	out	0x1b, r24	; 27
			break;
 102:	08 95       	ret
			case Port_B:
			CLR_BIT(PORTB,pin_num);
 104:	28 b3       	in	r18, 0x18	; 24
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinValue+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinValue+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	88 bb       	out	0x18, r24	; 24
			break;
 11a:	08 95       	ret
			case Port_C:
			CLR_BIT(PORTC,pin_num);
 11c:	25 b3       	in	r18, 0x15	; 21
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinValue+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinValue+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	85 bb       	out	0x15, r24	; 21
			break;
 132:	08 95       	ret
			case Port_D:
			CLR_BIT(PORTD,pin_num);
 134:	22 b3       	in	r18, 0x12	; 18
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinValue+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinValue+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	82 bb       	out	0x12, r24	; 18
 14a:	08 95       	ret

0000014c <DIO_SetPinDirection>:
		}
	}
}

void DIO_SetPinDirection(u8 port,u8 pin_num,u8 Direction){
if(Direction==output){
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	a1 f5       	brne	.+104    	; 0x1b8 <DIO_SetPinDirection+0x6c>
	switch(port){
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	89 f0       	breq	.+34     	; 0x176 <DIO_SetPinDirection+0x2a>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_SetPinDirection+0x14>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c9 f0       	breq	.+50     	; 0x18c <DIO_SetPinDirection+0x40>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	11 f1       	breq	.+68     	; 0x1a2 <DIO_SetPinDirection+0x56>
 15e:	08 95       	ret
		case Port_A:
		SET_BIT(DDRA,pin_num);
 160:	2a b3       	in	r18, 0x1a	; 26
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SetPinDirection+0x20>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SetPinDirection+0x1c>
 170:	82 2b       	or	r24, r18
 172:	8a bb       	out	0x1a, r24	; 26
		break;
 174:	08 95       	ret
		case Port_B:
		SET_BIT(DDRB,pin_num);
 176:	27 b3       	in	r18, 0x17	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPinDirection+0x36>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPinDirection+0x32>
 186:	82 2b       	or	r24, r18
 188:	87 bb       	out	0x17, r24	; 23
		break;
 18a:	08 95       	ret
		case Port_C:
		SET_BIT(DDRC,pin_num);
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SetPinDirection+0x4c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SetPinDirection+0x48>
 19c:	82 2b       	or	r24, r18
 19e:	84 bb       	out	0x14, r24	; 20
		break;
 1a0:	08 95       	ret
		case Port_D:
		SET_BIT(DDRD,pin_num);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPinDirection+0x62>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPinDirection+0x5e>
 1b2:	82 2b       	or	r24, r18
 1b4:	81 bb       	out	0x11, r24	; 17
		break;
 1b6:	08 95       	ret
	}
}	
else if(Direction==input){
 1b8:	41 11       	cpse	r20, r1
 1ba:	37 c0       	rjmp	.+110    	; 0x22a <DIO_SetPinDirection+0xde>
switch(port){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 f0       	breq	.+36     	; 0x1e4 <DIO_SetPinDirection+0x98>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <DIO_SetPinDirection+0x80>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	d9 f0       	breq	.+54     	; 0x1fc <DIO_SetPinDirection+0xb0>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	29 f1       	breq	.+74     	; 0x214 <DIO_SetPinDirection+0xc8>
 1ca:	08 95       	ret
	case Port_A:
	CLR_BIT(DDRA,pin_num);
 1cc:	2a b3       	in	r18, 0x1a	; 26
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_SetPinDirection+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_SetPinDirection+0x88>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	8a bb       	out	0x1a, r24	; 26
	break;
 1e2:	08 95       	ret
	case Port_B:
	CLR_BIT(DDRB,pin_num);
 1e4:	27 b3       	in	r18, 0x17	; 23
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPinDirection+0xa4>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPinDirection+0xa0>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	87 bb       	out	0x17, r24	; 23
	break;
 1fa:	08 95       	ret
	case Port_C:
	CLR_BIT(DDRC,pin_num);
 1fc:	24 b3       	in	r18, 0x14	; 20
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinDirection+0xbc>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinDirection+0xb8>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	84 bb       	out	0x14, r24	; 20
	break;
 212:	08 95       	ret
	case Port_D:
	CLR_BIT(DDRD,pin_num);
 214:	21 b3       	in	r18, 0x11	; 17
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPinDirection+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPinDirection+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	81 bb       	out	0x11, r24	; 17
 22a:	08 95       	ret

0000022c <DIO_GetPinValue>:
}	
}
}

u8 DIO_GetPinValue(u8 port,u8 pin_num){
	switch(port){
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	79 f0       	breq	.+30     	; 0x24e <DIO_GetPinValue+0x22>
 230:	28 f0       	brcs	.+10     	; 0x23c <DIO_GetPinValue+0x10>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	a9 f0       	breq	.+42     	; 0x260 <DIO_GetPinValue+0x34>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	e1 f0       	breq	.+56     	; 0x272 <DIO_GetPinValue+0x46>
 23a:	24 c0       	rjmp	.+72     	; 0x284 <DIO_GetPinValue+0x58>
		case Port_A:
		return GET_BIT(PINA,pin_num);
 23c:	89 b3       	in	r24, 0x19	; 25
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_GetPinValue+0x1a>
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_GetPinValue+0x16>
 24a:	81 70       	andi	r24, 0x01	; 1
 24c:	08 95       	ret
		break;
		case Port_B:
		return GET_BIT(PINB,pin_num);
 24e:	86 b3       	in	r24, 0x16	; 22
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_GetPinValue+0x2c>
 254:	95 95       	asr	r25
 256:	87 95       	ror	r24
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_GetPinValue+0x28>
 25c:	81 70       	andi	r24, 0x01	; 1
 25e:	08 95       	ret
		break;
		case Port_C:
		return GET_BIT(PINC,pin_num);
 260:	83 b3       	in	r24, 0x13	; 19
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_GetPinValue+0x3e>
 266:	95 95       	asr	r25
 268:	87 95       	ror	r24
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_GetPinValue+0x3a>
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	08 95       	ret
		break;
		case Port_D:
		return GET_BIT(PIND,pin_num);
 272:	80 b3       	in	r24, 0x10	; 16
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_GetPinValue+0x50>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_GetPinValue+0x4c>
 280:	81 70       	andi	r24, 0x01	; 1
 282:	08 95       	ret
		break;
		default:
		break;
		
	}
}
 284:	08 95       	ret

00000286 <MOTOR_TURN_RIGHT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	82 e5       	ldi	r24, 0x52	; 82
 28a:	97 e0       	ldi	r25, 0x07	; 7
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <MOTOR_TURN_RIGHT+0x6>
 294:	00 c0       	rjmp	.+0      	; 0x296 <MOTOR_TURN_RIGHT+0x10>
 296:	00 00       	nop
#include "UTILS.h"
#include "DIO_interface.h"

void MOTOR_TURN_RIGHT (void){
	_delay_ms(300);
	DIO_SetPinValue(Port_D,Pin_0,1);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(Port_D,Pin_1,0);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
 2ac:	08 95       	ret

000002ae <MOTOR_TURN_LEFT>:
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	82 e5       	ldi	r24, 0x52	; 82
 2b2:	97 e0       	ldi	r25, 0x07	; 7
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <MOTOR_TURN_LEFT+0x6>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <MOTOR_TURN_LEFT+0x10>
 2be:	00 00       	nop
}
void MOTOR_TURN_LEFT (void){
	_delay_ms(300);
	DIO_SetPinValue(Port_D,Pin_0,0);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(Port_D,Pin_1,1);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
 2d4:	08 95       	ret

000002d6 <MOTOR_STOP>:
	
	
}
void MOTOR_STOP(void){
	DIO_SetPinValue(Port_D,Pin_0,1);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	DIO_SetPinValue(Port_D,Pin_1,1);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
 2ea:	08 95       	ret

000002ec <main>:
int main(void)

{
	

  DIO_SetPinDirection(Port_C,Pin_0,input);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
  DIO_SetPinDirection(Port_C,Pin_1,input);
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
  DIO_SetPinValue(Port_C,Pin_0,1);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
   DIO_SetPinValue(Port_C,Pin_1,1);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
    DIO_SetPinDirection(Port_D,Pin_0,output);
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
    DIO_SetPinDirection(Port_D,Pin_1,output);
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
	
    while (1) 
    {
		
	 if(DIO_GetPinValue(Port_C,Pin_0)==0){
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_GetPinValue>
 330:	81 11       	cpse	r24, r1
 332:	17 c0       	rjmp	.+46     	; 0x362 <main+0x76>
		 MOTOR_TURN_RIGHT();
 334:	0e 94 43 01 	call	0x286	; 0x286 <MOTOR_TURN_RIGHT>
		 
		 while(DIO_GetPinValue(Port_C,Pin_0)==0){
 338:	0b c0       	rjmp	.+22     	; 0x350 <main+0x64>
			 if(DIO_GetPinValue(Port_C,Pin_1)==0) MOTOR_STOP();
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_GetPinValue>
 342:	81 11       	cpse	r24, r1
 344:	03 c0       	rjmp	.+6      	; 0x34c <main+0x60>
 346:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MOTOR_STOP>
 34a:	02 c0       	rjmp	.+4      	; 0x350 <main+0x64>
			 else { MOTOR_TURN_RIGHT();}
 34c:	0e 94 43 01 	call	0x286	; 0x286 <MOTOR_TURN_RIGHT>
    {
		
	 if(DIO_GetPinValue(Port_C,Pin_0)==0){
		 MOTOR_TURN_RIGHT();
		 
		 while(DIO_GetPinValue(Port_C,Pin_0)==0){
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_GetPinValue>
 358:	88 23       	and	r24, r24
 35a:	79 f3       	breq	.-34     	; 0x33a <main+0x4e>
			 if(DIO_GetPinValue(Port_C,Pin_1)==0) MOTOR_STOP();
			 else { MOTOR_TURN_RIGHT();}
		 }
		 MOTOR_STOP();
 35c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MOTOR_STOP>
 360:	e3 cf       	rjmp	.-58     	; 0x328 <main+0x3c>
		}
		
else if(DIO_GetPinValue(Port_C,Pin_1)==0)
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_GetPinValue>
 36a:	81 11       	cpse	r24, r1
 36c:	17 c0       	rjmp	.+46     	; 0x39c <main+0xb0>
		{
			
			MOTOR_TURN_LEFT();
 36e:	0e 94 57 01 	call	0x2ae	; 0x2ae <MOTOR_TURN_LEFT>
			
			while(DIO_GetPinValue(Port_C,Pin_1)==0){
 372:	0b c0       	rjmp	.+22     	; 0x38a <main+0x9e>
				if(DIO_GetPinValue(Port_C,Pin_0)==0) MOTOR_STOP();
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_GetPinValue>
 37c:	81 11       	cpse	r24, r1
 37e:	03 c0       	rjmp	.+6      	; 0x386 <main+0x9a>
 380:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MOTOR_STOP>
 384:	02 c0       	rjmp	.+4      	; 0x38a <main+0x9e>
				else {MOTOR_TURN_LEFT();}
 386:	0e 94 57 01 	call	0x2ae	; 0x2ae <MOTOR_TURN_LEFT>
else if(DIO_GetPinValue(Port_C,Pin_1)==0)
		{
			
			MOTOR_TURN_LEFT();
			
			while(DIO_GetPinValue(Port_C,Pin_1)==0){
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_GetPinValue>
 392:	88 23       	and	r24, r24
 394:	79 f3       	breq	.-34     	; 0x374 <main+0x88>
				if(DIO_GetPinValue(Port_C,Pin_0)==0) MOTOR_STOP();
				else {MOTOR_TURN_LEFT();}
			}
			MOTOR_STOP();	
 396:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MOTOR_STOP>
 39a:	c6 cf       	rjmp	.-116    	; 0x328 <main+0x3c>
		}
		else{
			MOTOR_STOP();
 39c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MOTOR_STOP>
 3a0:	c3 cf       	rjmp	.-122    	; 0x328 <main+0x3c>

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
