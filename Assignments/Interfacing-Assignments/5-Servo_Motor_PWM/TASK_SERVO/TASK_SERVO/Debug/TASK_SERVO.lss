
TASK_SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000083e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000083e  000008d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  000008da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001923  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae0  00000000  00000000  000023db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf8  00000000  00000000  00002ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000704  00000000  00000000  00003eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cde  00000000  00000000  000045f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000052ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0a 03 	call	0x614	; 0x614 <main>
  8a:	0c 94 1d 04 	jmp	0x83a	; 0x83a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinValue>:
		break;
		case Port_C:
		TOGGLE_BIT(PORTC,pin_num);
		break;
		case Port_D:
		TOGGLE_BIT(PORTD,pin_num);
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	a1 f5       	brne	.+104    	; 0xfe <DIO_SetPinValue+0x6c>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	89 f0       	breq	.+34     	; 0xbc <DIO_SetPinValue+0x2a>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_SetPinValue+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_SetPinValue+0x40>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_SetPinValue+0x56>
  a4:	08 95       	ret
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_SetPinValue+0x20>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_SetPinValue+0x1c>
  b6:	82 2b       	or	r24, r18
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
  bc:	28 b3       	in	r18, 0x18	; 24
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_SetPinValue+0x36>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_SetPinValue+0x32>
  cc:	82 2b       	or	r24, r18
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	08 95       	ret
  d2:	25 b3       	in	r18, 0x15	; 21
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinValue+0x4c>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinValue+0x48>
  e2:	82 2b       	or	r24, r18
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	08 95       	ret
  e8:	22 b3       	in	r18, 0x12	; 18
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPinValue+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPinValue+0x5e>
  f8:	82 2b       	or	r24, r18
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	08 95       	ret
  fe:	41 11       	cpse	r20, r1
 100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_SetPinValue+0xde>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 f0       	breq	.+36     	; 0x12a <DIO_SetPinValue+0x98>
 106:	28 f0       	brcs	.+10     	; 0x112 <DIO_SetPinValue+0x80>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_SetPinValue+0xb0>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	29 f1       	breq	.+74     	; 0x15a <DIO_SetPinValue+0xc8>
 110:	08 95       	ret
 112:	2b b3       	in	r18, 0x1b	; 27
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinValue+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinValue+0x88>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	8b bb       	out	0x1b, r24	; 27
 128:	08 95       	ret
 12a:	28 b3       	in	r18, 0x18	; 24
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_SetPinValue+0xa4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_SetPinValue+0xa0>
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	88 bb       	out	0x18, r24	; 24
 140:	08 95       	ret
 142:	25 b3       	in	r18, 0x15	; 21
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_SetPinValue+0xbc>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_SetPinValue+0xb8>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 bb       	out	0x15, r24	; 21
 158:	08 95       	ret
 15a:	22 b3       	in	r18, 0x12	; 18
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SetPinValue+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SetPinValue+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	82 bb       	out	0x12, r24	; 18
 170:	08 95       	ret

00000172 <DIO_SetPinDirection>:
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	a1 f5       	brne	.+104    	; 0x1de <DIO_SetPinDirection+0x6c>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	89 f0       	breq	.+34     	; 0x19c <DIO_SetPinDirection+0x2a>
 17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_SetPinDirection+0x14>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_SetPinDirection+0x40>
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_SetPinDirection+0x56>
 184:	08 95       	ret
 186:	2a b3       	in	r18, 0x1a	; 26
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinDirection+0x20>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinDirection+0x1c>
 196:	82 2b       	or	r24, r18
 198:	8a bb       	out	0x1a, r24	; 26
 19a:	08 95       	ret
 19c:	27 b3       	in	r18, 0x17	; 23
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPinDirection+0x36>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPinDirection+0x32>
 1ac:	82 2b       	or	r24, r18
 1ae:	87 bb       	out	0x17, r24	; 23
 1b0:	08 95       	ret
 1b2:	24 b3       	in	r18, 0x14	; 20
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinDirection+0x4c>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinDirection+0x48>
 1c2:	82 2b       	or	r24, r18
 1c4:	84 bb       	out	0x14, r24	; 20
 1c6:	08 95       	ret
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SetPinDirection+0x62>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SetPinDirection+0x5e>
 1d8:	82 2b       	or	r24, r18
 1da:	81 bb       	out	0x11, r24	; 17
 1dc:	08 95       	ret
 1de:	41 11       	cpse	r20, r1
 1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_SetPinDirection+0xde>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_SetPinDirection+0x98>
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_SetPinDirection+0x80>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_SetPinDirection+0xb0>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_SetPinDirection+0xc8>
 1f0:	08 95       	ret
 1f2:	2a b3       	in	r18, 0x1a	; 26
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinDirection+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinDirection+0x88>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	8a bb       	out	0x1a, r24	; 26
 208:	08 95       	ret
 20a:	27 b3       	in	r18, 0x17	; 23
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinDirection+0xa4>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinDirection+0xa0>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	87 bb       	out	0x17, r24	; 23
 220:	08 95       	ret
 222:	24 b3       	in	r18, 0x14	; 20
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinDirection+0xbc>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinDirection+0xb8>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	84 bb       	out	0x14, r24	; 20
 238:	08 95       	ret
 23a:	21 b3       	in	r18, 0x11	; 17
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinDirection+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinDirection+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	81 bb       	out	0x11, r24	; 17
 250:	08 95       	ret

00000252 <DIO_GetPinValue>:
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	79 f0       	breq	.+30     	; 0x274 <DIO_GetPinValue+0x22>
 256:	28 f0       	brcs	.+10     	; 0x262 <DIO_GetPinValue+0x10>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	a9 f0       	breq	.+42     	; 0x286 <DIO_GetPinValue+0x34>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	e1 f0       	breq	.+56     	; 0x298 <DIO_GetPinValue+0x46>
 260:	24 c0       	rjmp	.+72     	; 0x2aa <DIO_GetPinValue+0x58>
 262:	89 b3       	in	r24, 0x19	; 25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_GetPinValue+0x1a>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_GetPinValue+0x16>
 270:	81 70       	andi	r24, 0x01	; 1
 272:	08 95       	ret
 274:	86 b3       	in	r24, 0x16	; 22
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_GetPinValue+0x2c>
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_GetPinValue+0x28>
 282:	81 70       	andi	r24, 0x01	; 1
 284:	08 95       	ret
 286:	83 b3       	in	r24, 0x13	; 19
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_GetPinValue+0x3e>
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_GetPinValue+0x3a>
 294:	81 70       	andi	r24, 0x01	; 1
 296:	08 95       	ret
 298:	80 b3       	in	r24, 0x10	; 16
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_GetPinValue+0x50>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_GetPinValue+0x4c>
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	08 95       	ret
 2aa:	08 95       	ret

000002ac <DIO_SetPortValue>:




void DIO_SetPortValue(u8 port, u8 Value){ //11111111==255
	switch(port){
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	41 f0       	breq	.+16     	; 0x2c0 <DIO_SetPortValue+0x14>
 2b0:	28 f0       	brcs	.+10     	; 0x2bc <DIO_SetPortValue+0x10>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <DIO_SetPortValue+0x18>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <DIO_SetPortValue+0x1c>
 2ba:	08 95       	ret
		case Port_A:
		PORTA=Value;
 2bc:	6b bb       	out	0x1b, r22	; 27
		break;
 2be:	08 95       	ret
		case Port_B:
		PORTB=Value;
 2c0:	68 bb       	out	0x18, r22	; 24
		break;
 2c2:	08 95       	ret
		case Port_C:
		PORTC=Value;
 2c4:	65 bb       	out	0x15, r22	; 21
		break;
 2c6:	08 95       	ret
		case Port_D:
		PORTD=Value;
 2c8:	62 bb       	out	0x12, r22	; 18
 2ca:	08 95       	ret

000002cc <DIO_SetPortDirection>:
		
	}
}

void DIO_SetPortDirection(u8 port, u8 Direction){
	switch(port){
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <DIO_SetPortDirection+0x14>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <DIO_SetPortDirection+0x10>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	39 f0       	breq	.+14     	; 0x2e4 <DIO_SetPortDirection+0x18>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <DIO_SetPortDirection+0x1c>
 2da:	08 95       	ret
		case Port_A:
		DDRA=Direction;
 2dc:	6a bb       	out	0x1a, r22	; 26
		break;
 2de:	08 95       	ret
		case Port_B:
		DDRB=Direction;
 2e0:	67 bb       	out	0x17, r22	; 23
		break;
 2e2:	08 95       	ret
		case Port_C:
		DDRC=Direction;
 2e4:	64 bb       	out	0x14, r22	; 20
		break;
 2e6:	08 95       	ret
		case Port_D:
		DDRD=Direction;
 2e8:	61 bb       	out	0x11, r22	; 17
 2ea:	08 95       	ret

000002ec <KEYPAD_INIT>:
#include "KPAD_interface.h"
u8 KEYPAD_R[] = {R0 ,R1 ,R2 ,R3};
u8 KEYPAD_C[] = {C0 ,C1 ,C2 ,C3};

void KEYPAD_INIT(u8 kpd_port)
{
 2ec:	cf 93       	push	r28
 2ee:	c8 2f       	mov	r28, r24
	 DIO_SetPinDirection(kpd_port ,R0 , input);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	 DIO_SetPinDirection(kpd_port ,R1 , input);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	8c 2f       	mov	r24, r28
 2fe:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	 DIO_SetPinDirection(kpd_port ,R2 ,input);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	8c 2f       	mov	r24, r28
 308:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	 DIO_SetPinDirection(kpd_port ,R3 , input);
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	63 e0       	ldi	r22, 0x03	; 3
 310:	8c 2f       	mov	r24, r28
 312:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	
	 DIO_SetPinDirection(kpd_port ,C0 , output);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	64 e0       	ldi	r22, 0x04	; 4
 31a:	8c 2f       	mov	r24, r28
 31c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	 DIO_SetPinDirection(kpd_port ,C1 ,  output);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	65 e0       	ldi	r22, 0x05	; 5
 324:	8c 2f       	mov	r24, r28
 326:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	 DIO_SetPinDirection(kpd_port ,C2 , output);
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	66 e0       	ldi	r22, 0x06	; 6
 32e:	8c 2f       	mov	r24, r28
 330:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	 DIO_SetPinDirection(kpd_port ,C3 ,  output);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	67 e0       	ldi	r22, 0x07	; 7
 338:	8c 2f       	mov	r24, r28
 33a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
	
	DIO_SetPortValue(kpd_port , 0xff);
 33e:	6f ef       	ldi	r22, 0xFF	; 255
 340:	8c 2f       	mov	r24, r28
 342:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_SetPortValue>
	
}
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <KEYPAD_GETCHAR>:

u8 KEYPAD_GETCHAR(u8 kpd_port)
{
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	c8 2f       	mov	r28, r24
	
	
	int i ,j;
	for (i = 0 ; i < 4 ; i++)
 358:	e1 2c       	mov	r14, r1
 35a:	f1 2c       	mov	r15, r1
 35c:	90 c0       	rjmp	.+288    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	{
		DIO_SetPinValue(kpd_port , KEYPAD_C[0],HIGH );
 35e:	00 e6       	ldi	r16, 0x60	; 96
 360:	10 e0       	ldi	r17, 0x00	; 0
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	f8 01       	movw	r30, r16
 366:	60 81       	ld	r22, Z
 368:	8c 2f       	mov	r24, r28
 36a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
		DIO_SetPinValue(kpd_port , KEYPAD_C[1],HIGH );
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	f8 01       	movw	r30, r16
 372:	61 81       	ldd	r22, Z+1	; 0x01
 374:	8c 2f       	mov	r24, r28
 376:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
		DIO_SetPinValue(kpd_port , KEYPAD_C[2],HIGH );
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	f8 01       	movw	r30, r16
 37e:	62 81       	ldd	r22, Z+2	; 0x02
 380:	8c 2f       	mov	r24, r28
 382:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
		DIO_SetPinValue(kpd_port , KEYPAD_C[3] ,HIGH);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	f8 01       	movw	r30, r16
 38a:	63 81       	ldd	r22, Z+3	; 0x03
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
		
		DIO_SetPinValue(kpd_port , KEYPAD_C[i] , LOW);
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	f7 01       	movw	r30, r14
 396:	e0 5a       	subi	r30, 0xA0	; 160
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	60 81       	ld	r22, Z
 39c:	8c 2f       	mov	r24, r28
 39e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
		
		for (j = 0 ;j < 4 ;j++)
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	64 c0       	rjmp	.+200    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		{
			
			if (DIO_GetPinValue (kpd_port , KEYPAD_R[j])==LOW)
 3a8:	f8 01       	movw	r30, r16
 3aa:	ec 59       	subi	r30, 0x9C	; 156
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	60 81       	ld	r22, Z
 3b0:	8c 2f       	mov	r24, r28
 3b2:	0e 94 29 01 	call	0x252	; 0x252 <DIO_GetPinValue>
 3b6:	d8 2f       	mov	r29, r24
 3b8:	88 23       	and	r24, r24
 3ba:	41 f0       	breq	.+16     	; 0x3cc <KEYPAD_GETCHAR+0x82>
 3bc:	57 c0       	rjmp	.+174    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			{
				
				while(DIO_GetPinValue (kpd_port , KEYPAD_R[j])==LOW){
					DIO_GetPinValue(kpd_port , KEYPAD_R[j]);
 3be:	f8 01       	movw	r30, r16
 3c0:	ec 59       	subi	r30, 0x9C	; 156
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	60 81       	ld	r22, Z
 3c6:	8c 2f       	mov	r24, r28
 3c8:	0e 94 29 01 	call	0x252	; 0x252 <DIO_GetPinValue>
		{
			
			if (DIO_GetPinValue (kpd_port , KEYPAD_R[j])==LOW)
			{
				
				while(DIO_GetPinValue (kpd_port , KEYPAD_R[j])==LOW){
 3cc:	f8 01       	movw	r30, r16
 3ce:	ec 59       	subi	r30, 0x9C	; 156
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	60 81       	ld	r22, Z
 3d4:	8c 2f       	mov	r24, r28
 3d6:	0e 94 29 01 	call	0x252	; 0x252 <DIO_GetPinValue>
 3da:	88 23       	and	r24, r24
 3dc:	81 f3       	breq	.-32     	; 0x3be <KEYPAD_GETCHAR+0x74>
					DIO_GetPinValue(kpd_port , KEYPAD_R[j]);
				}
				
				switch(i)
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	ef 16       	cp	r14, r31
 3e2:	f1 04       	cpc	r15, r1
 3e4:	e9 f0       	breq	.+58     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3e6:	24 f4       	brge	.+8      	; 0x3f0 <KEYPAD_GETCHAR+0xa6>
 3e8:	e1 14       	cp	r14, r1
 3ea:	f1 04       	cpc	r15, r1
 3ec:	51 f0       	breq	.+20     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3ee:	3e c0       	rjmp	.+124    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 3f0:	e2 e0       	ldi	r30, 0x02	; 2
 3f2:	ee 16       	cp	r14, r30
 3f4:	f1 04       	cpc	r15, r1
 3f6:	09 f1       	breq	.+66     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3f8:	f3 e0       	ldi	r31, 0x03	; 3
 3fa:	ef 16       	cp	r14, r31
 3fc:	f1 04       	cpc	r15, r1
 3fe:	51 f1       	breq	.+84     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 400:	35 c0       	rjmp	.+106    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
				{
					case (0):
					if(j == 0) return 7;
 402:	01 15       	cp	r16, r1
 404:	11 05       	cpc	r17, r1
 406:	09 f4       	brne	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	41 c0       	rjmp	.+130    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
					else if(j == 1) return 4;
 40a:	01 30       	cpi	r16, 0x01	; 1
 40c:	11 05       	cpc	r17, r1
 40e:	09 f4       	brne	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	3f c0       	rjmp	.+126    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
					else if(j == 2) return 1;
 412:	02 30       	cpi	r16, 0x02	; 2
 414:	11 05       	cpc	r17, r1
 416:	f1 f1       	breq	.+124    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
					else if(j == 3) return 'c';
 418:	03 30       	cpi	r16, 0x03	; 3
 41a:	11 05       	cpc	r17, r1
 41c:	39 f5       	brne	.+78     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 41e:	3c c0       	rjmp	.+120    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
					break;
					case (1):
					if(j == 0) return 8;
 420:	01 15       	cp	r16, r1
 422:	11 05       	cpc	r17, r1
 424:	d9 f1       	breq	.+118    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
					else if(j == 1) return 5;
 426:	01 30       	cpi	r16, 0x01	; 1
 428:	11 05       	cpc	r17, r1
 42a:	d1 f1       	breq	.+116    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
					else if(j == 2) return 2;
 42c:	02 30       	cpi	r16, 0x02	; 2
 42e:	11 05       	cpc	r17, r1
 430:	c9 f1       	breq	.+114    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					else if(j == 3) return 0;
 432:	03 30       	cpi	r16, 0x03	; 3
 434:	11 05       	cpc	r17, r1
 436:	d1 f4       	brne	.+52     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 438:	46 c0       	rjmp	.+140    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					break;
					case (2):
					if(j == 0) return 9;
 43a:	01 15       	cp	r16, r1
 43c:	11 05       	cpc	r17, r1
 43e:	a1 f1       	breq	.+104    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
					else if(j == 1) return 6;
 440:	01 30       	cpi	r16, 0x01	; 1
 442:	11 05       	cpc	r17, r1
 444:	99 f1       	breq	.+102    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
					else if(j == 2) return 3;
 446:	02 30       	cpi	r16, 0x02	; 2
 448:	11 05       	cpc	r17, r1
 44a:	91 f1       	breq	.+100    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
					else if(j == 3) return '=';
 44c:	03 30       	cpi	r16, 0x03	; 3
 44e:	11 05       	cpc	r17, r1
 450:	69 f4       	brne	.+26     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 452:	30 c0       	rjmp	.+96     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
					break;
					case (3):
					if(j == 0) return '/';
 454:	01 15       	cp	r16, r1
 456:	11 05       	cpc	r17, r1
 458:	79 f1       	breq	.+94     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
					else if(j == 1) return '*';
 45a:	01 30       	cpi	r16, 0x01	; 1
 45c:	11 05       	cpc	r17, r1
 45e:	71 f1       	breq	.+92     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
					else if(j == 2) return '-';
 460:	02 30       	cpi	r16, 0x02	; 2
 462:	11 05       	cpc	r17, r1
 464:	69 f1       	breq	.+90     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
					else if(j == 3) return '+';
 466:	03 30       	cpi	r16, 0x03	; 3
 468:	11 05       	cpc	r17, r1
 46a:	61 f1       	breq	.+88     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		DIO_SetPinValue(kpd_port , KEYPAD_C[2],HIGH );
		DIO_SetPinValue(kpd_port , KEYPAD_C[3] ,HIGH);
		
		DIO_SetPinValue(kpd_port , KEYPAD_C[i] , LOW);
		
		for (j = 0 ;j < 4 ;j++)
 46c:	0f 5f       	subi	r16, 0xFF	; 255
 46e:	1f 4f       	sbci	r17, 0xFF	; 255
 470:	04 30       	cpi	r16, 0x04	; 4
 472:	11 05       	cpc	r17, r1
 474:	0c f4       	brge	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 476:	98 cf       	rjmp	.-208    	; 0x3a8 <KEYPAD_GETCHAR+0x5e>
u8 KEYPAD_GETCHAR(u8 kpd_port)
{
	
	
	int i ,j;
	for (i = 0 ; i < 4 ; i++)
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	e8 1a       	sub	r14, r24
 47c:	f8 0a       	sbc	r15, r24
 47e:	e4 e0       	ldi	r30, 0x04	; 4
 480:	ee 16       	cp	r14, r30
 482:	f1 04       	cpc	r15, r1
 484:	0c f4       	brge	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 486:	6b cf       	rjmp	.-298    	; 0x35e <KEYPAD_GETCHAR+0x14>
			
		}
		
	}
	
	return 254;
 488:	de ef       	ldi	r29, 0xFE	; 254
 48a:	1d c0       	rjmp	.+58     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				}
				
				switch(i)
				{
					case (0):
					if(j == 0) return 7;
 48c:	d7 e0       	ldi	r29, 0x07	; 7
 48e:	1b c0       	rjmp	.+54     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 1) return 4;
 490:	d4 e0       	ldi	r29, 0x04	; 4
 492:	19 c0       	rjmp	.+50     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 2) return 1;
 494:	d1 e0       	ldi	r29, 0x01	; 1
 496:	17 c0       	rjmp	.+46     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 3) return 'c';
 498:	d3 e6       	ldi	r29, 0x63	; 99
 49a:	15 c0       	rjmp	.+42     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					break;
					case (1):
					if(j == 0) return 8;
 49c:	d8 e0       	ldi	r29, 0x08	; 8
 49e:	13 c0       	rjmp	.+38     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 1) return 5;
 4a0:	d5 e0       	ldi	r29, 0x05	; 5
 4a2:	11 c0       	rjmp	.+34     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 2) return 2;
 4a4:	d2 e0       	ldi	r29, 0x02	; 2
 4a6:	0f c0       	rjmp	.+30     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 3) return 0;
					break;
					case (2):
					if(j == 0) return 9;
 4a8:	d9 e0       	ldi	r29, 0x09	; 9
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 1) return 6;
 4ac:	d6 e0       	ldi	r29, 0x06	; 6
 4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 2) return 3;
 4b0:	d3 e0       	ldi	r29, 0x03	; 3
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 3) return '=';
 4b4:	dd e3       	ldi	r29, 0x3D	; 61
 4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					break;
					case (3):
					if(j == 0) return '/';
 4b8:	df e2       	ldi	r29, 0x2F	; 47
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 1) return '*';
 4bc:	da e2       	ldi	r29, 0x2A	; 42
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 2) return '-';
 4c0:	dd e2       	ldi	r29, 0x2D	; 45
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					else if(j == 3) return '+';
 4c4:	db e2       	ldi	r29, 0x2B	; 43
		}
		
	}
	
	return 254;
}
 4c6:	8d 2f       	mov	r24, r29
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	08 95       	ret

000004d6 <LCD_Send_Command>:
	}
	//3awz a5rog mn CGRAm w aro7 ll DDRam 34an a write on LCD
	GOTOXY(Copy_u8XPOS,Copy_u8YPOS);
	//show data of each pattern on the lcd
	LCD_Send_Data (Copy_u8PatternNumber);
}
 4d6:	cf 93       	push	r28
 4d8:	c8 2f       	mov	r28, r24
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 4ee:	6c 2f       	mov	r22, r28
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_SetPortValue>
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	62 e0       	ldi	r22, 0x02	; 2
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 500:	8d ee       	ldi	r24, 0xED	; 237
 502:	92 e0       	ldi	r25, 0x02	; 2
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <LCD_Send_Command+0x2e>
 508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_Send_Command+0x34>
 50a:	00 00       	nop
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <LCD_Send_Data>:
 51a:	cf 93       	push	r28
 51c:	c8 2f       	mov	r28, r24
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 532:	6c 2f       	mov	r22, r28
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_SetPortValue>
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	62 e0       	ldi	r22, 0x02	; 2
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 544:	8d ee       	ldi	r24, 0xED	; 237
 546:	92 e0       	ldi	r25, 0x02	; 2
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_Send_Data+0x2e>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_Send_Data+0x34>
 54e:	00 00       	nop
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinValue>
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <LCD_Init>:
 55e:	8f e0       	ldi	r24, 0x0F	; 15
 560:	97 e2       	ldi	r25, 0x27	; 39
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <LCD_Init+0x4>
 566:	00 c0       	rjmp	.+0      	; 0x568 <LCD_Init+0xa>
 568:	00 00       	nop
 56a:	8f e3       	ldi	r24, 0x3F	; 63
 56c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Send_Command>
 570:	9d e0       	ldi	r25, 0x0D	; 13
 572:	9a 95       	dec	r25
 574:	f1 f7       	brne	.-4      	; 0x572 <LCD_Init+0x14>
 576:	00 00       	nop
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Send_Command>
 57e:	8d e0       	ldi	r24, 0x0D	; 13
 580:	8a 95       	dec	r24
 582:	f1 f7       	brne	.-4      	; 0x580 <LCD_Init+0x22>
 584:	00 00       	nop
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Send_Command>
 58c:	83 ef       	ldi	r24, 0xF3	; 243
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <LCD_Init+0x32>
 594:	00 c0       	rjmp	.+0      	; 0x596 <LCD_Init+0x38>
 596:	00 00       	nop
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_Send_Command>
 59e:	8f e0       	ldi	r24, 0x0F	; 15
 5a0:	97 e2       	ldi	r25, 0x27	; 39
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_Init+0x44>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_Init+0x4a>
 5a8:	00 00       	nop
 5aa:	08 95       	ret

000005ac <LCD_String>:
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	8c 01       	movw	r16, r24
 5b6:	c0 e0       	ldi	r28, 0x00	; 0
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <LCD_String+0x16>
 5bc:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_Send_Data>
 5c0:	21 96       	adiw	r28, 0x01	; 1
 5c2:	f8 01       	movw	r30, r16
 5c4:	ec 0f       	add	r30, r28
 5c6:	fd 1f       	adc	r31, r29
 5c8:	80 81       	ld	r24, Z
 5ca:	81 11       	cpse	r24, r1
 5cc:	f7 cf       	rjmp	.-18     	; 0x5bc <LCD_String+0x10>
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	08 95       	ret

000005d8 <LCD_printNumber>:




void LCD_printNumber(int num)
{
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	2a 97       	sbiw	r28, 0x0a	; 10
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
	u8 str[10];
itoa(num, str, 10);  // here 10 means decimal
 5ec:	4a e0       	ldi	r20, 0x0A	; 10
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	be 01       	movw	r22, r28
 5f2:	6f 5f       	subi	r22, 0xFF	; 255
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <itoa>
	LCD_String(str);
 5fa:	ce 01       	movw	r24, r28
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_String>
}
 602:	2a 96       	adiw	r28, 0x0a	; 10
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <main>:

int main(void)
{
	u8 x=0;
	u8 Deg=0;
DIO_SetPortDirection(Port_C,Port_output);
 614:	6f ef       	ldi	r22, 0xFF	; 255
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_SetPortDirection>
DIO_SetPinDirection(Port_B,Pin_0,output);
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
DIO_SetPinDirection(Port_B,Pin_1,output);
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
DIO_SetPinDirection(Port_B,Pin_2,output);
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>


 KEYPAD_INIT (Port_A);
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	0e 94 76 01 	call	0x2ec	; 0x2ec <KEYPAD_INIT>
LCD_Init();
 640:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_Init>
DIO_SetPinDirection(Port_D,Pin_5,output);
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	65 e0       	ldi	r22, 0x05	; 5
 648:	83 e0       	ldi	r24, 0x03	; 3
 64a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_SetPinDirection>
SERVO_TIMER1_mode14_Init();
 64e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <SERVO_TIMER1_mode14_Init>

x=KEYPAD_GETCHAR(Port_A);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 a5 01 	call	0x34a	; 0x34a <KEYPAD_GETCHAR>
#include "KPAD_interface.h"

int main(void)
{
	u8 x=0;
	u8 Deg=0;
 658:	d0 e0       	ldi	r29, 0x00	; 0

//SERVO_Set_Angle(90);
    while (1) 
    {
		
		x=KEYPAD_GETCHAR(Port_A);
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 a5 01 	call	0x34a	; 0x34a <KEYPAD_GETCHAR>
 660:	c8 2f       	mov	r28, r24
		if(x!=254 && x!='*' ){
 662:	8e 3f       	cpi	r24, 0xFE	; 254
 664:	b9 f0       	breq	.+46     	; 0x694 <main+0x80>
 666:	8a 32       	cpi	r24, 0x2A	; 42
 668:	a9 f0       	breq	.+42     	; 0x694 <main+0x80>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66a:	2f ef       	ldi	r18, 0xFF	; 255
 66c:	82 e5       	ldi	r24, 0x52	; 82
 66e:	97 e0       	ldi	r25, 0x07	; 7
 670:	21 50       	subi	r18, 0x01	; 1
 672:	80 40       	sbci	r24, 0x00	; 0
 674:	90 40       	sbci	r25, 0x00	; 0
 676:	e1 f7       	brne	.-8      	; 0x670 <main+0x5c>
 678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x66>
 67a:	00 00       	nop
		_delay_ms(300);
		LCD_printNumber(x); Deg = x + Deg*10;}
 67c:	8c 2f       	mov	r24, r28
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_printNumber>
 684:	8d 2f       	mov	r24, r29
 686:	88 0f       	add	r24, r24
 688:	d8 2f       	mov	r29, r24
 68a:	dd 0f       	add	r29, r29
 68c:	dd 0f       	add	r29, r29
 68e:	8d 0f       	add	r24, r29
 690:	dc 2f       	mov	r29, r28
 692:	d8 0f       	add	r29, r24
		
			
		
		if(x=='*'){
 694:	ca 32       	cpi	r28, 0x2A	; 42
 696:	09 f7       	brne	.-62     	; 0x65a <main+0x46>
		SERVO_Set_Angle(Deg); 	}
 698:	8d 2f       	mov	r24, r29
 69a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SERVO_Set_Angle>
 69e:	dd cf       	rjmp	.-70     	; 0x65a <main+0x46>

000006a0 <SERVO_TIMER1_mode14_Init>:
	ICR1=0;
	CLR_BIT(TIMSK,TICIE1);
}
void ICU_CALL_BACK(void (*ICU_callback)(void))
{
	FUNC=ICU_callback;
 6a0:	8f b5       	in	r24, 0x2f	; 47
 6a2:	8f 7b       	andi	r24, 0xBF	; 191
 6a4:	8f bd       	out	0x2f, r24	; 47
 6a6:	8f b5       	in	r24, 0x2f	; 47
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	8f bd       	out	0x2f, r24	; 47
 6ac:	8f b5       	in	r24, 0x2f	; 47
 6ae:	8e 7f       	andi	r24, 0xFE	; 254
 6b0:	8f bd       	out	0x2f, r24	; 47
 6b2:	8f b5       	in	r24, 0x2f	; 47
 6b4:	82 60       	ori	r24, 0x02	; 2
 6b6:	8f bd       	out	0x2f, r24	; 47
 6b8:	8e b5       	in	r24, 0x2e	; 46
 6ba:	80 61       	ori	r24, 0x10	; 16
 6bc:	8e bd       	out	0x2e, r24	; 46
 6be:	8e b5       	in	r24, 0x2e	; 46
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	8e bd       	out	0x2e, r24	; 46
 6c4:	8e b5       	in	r24, 0x2e	; 46
 6c6:	8e 7f       	andi	r24, 0xFE	; 254
 6c8:	8e bd       	out	0x2e, r24	; 46
 6ca:	8e b5       	in	r24, 0x2e	; 46
 6cc:	82 60       	ori	r24, 0x02	; 2
 6ce:	8e bd       	out	0x2e, r24	; 46
 6d0:	8e b5       	in	r24, 0x2e	; 46
 6d2:	8b 7f       	andi	r24, 0xFB	; 251
 6d4:	8e bd       	out	0x2e, r24	; 46
 6d6:	8f e1       	ldi	r24, 0x1F	; 31
 6d8:	9e e4       	ldi	r25, 0x4E	; 78
 6da:	97 bd       	out	0x27, r25	; 39
 6dc:	86 bd       	out	0x26, r24	; 38
 6de:	87 ee       	ldi	r24, 0xE7	; 231
 6e0:	93 e0       	ldi	r25, 0x03	; 3
 6e2:	9b bd       	out	0x2b, r25	; 43
 6e4:	8a bd       	out	0x2a, r24	; 42
 6e6:	08 95       	ret

000006e8 <SERVO_Set_Angle>:
 6e8:	28 2f       	mov	r18, r24
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	a8 ee       	ldi	r26, 0xE8	; 232
 6ee:	b3 e0       	ldi	r27, 0x03	; 3
 6f0:	0e 94 ce 03 	call	0x79c	; 0x79c <__umulhisi3>
 6f4:	24 eb       	ldi	r18, 0xB4	; 180
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	40 e0       	ldi	r20, 0x00	; 0
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	0e 94 ac 03 	call	0x758	; 0x758 <__udivmodsi4>
 700:	29 51       	subi	r18, 0x19	; 25
 702:	3c 4f       	sbci	r19, 0xFC	; 252
 704:	3b bd       	out	0x2b, r19	; 43
 706:	2a bd       	out	0x2a, r18	; 42
 708:	08 95       	ret

0000070a <__vector_6>:
}

void __vector_6 (void)__attribute__((signal));
void __vector_6 (void)
{
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	ef 93       	push	r30
 72a:	ff 93       	push	r31
	FUNC();
 72c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 730:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 734:	09 95       	icall
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	bf 91       	pop	r27
 73c:	af 91       	pop	r26
 73e:	9f 91       	pop	r25
 740:	8f 91       	pop	r24
 742:	7f 91       	pop	r23
 744:	6f 91       	pop	r22
 746:	5f 91       	pop	r21
 748:	4f 91       	pop	r20
 74a:	3f 91       	pop	r19
 74c:	2f 91       	pop	r18
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <__udivmodsi4>:
 758:	a1 e2       	ldi	r26, 0x21	; 33
 75a:	1a 2e       	mov	r1, r26
 75c:	aa 1b       	sub	r26, r26
 75e:	bb 1b       	sub	r27, r27
 760:	fd 01       	movw	r30, r26
 762:	0d c0       	rjmp	.+26     	; 0x77e <__udivmodsi4_ep>

00000764 <__udivmodsi4_loop>:
 764:	aa 1f       	adc	r26, r26
 766:	bb 1f       	adc	r27, r27
 768:	ee 1f       	adc	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	a2 17       	cp	r26, r18
 76e:	b3 07       	cpc	r27, r19
 770:	e4 07       	cpc	r30, r20
 772:	f5 07       	cpc	r31, r21
 774:	20 f0       	brcs	.+8      	; 0x77e <__udivmodsi4_ep>
 776:	a2 1b       	sub	r26, r18
 778:	b3 0b       	sbc	r27, r19
 77a:	e4 0b       	sbc	r30, r20
 77c:	f5 0b       	sbc	r31, r21

0000077e <__udivmodsi4_ep>:
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	1a 94       	dec	r1
 788:	69 f7       	brne	.-38     	; 0x764 <__udivmodsi4_loop>
 78a:	60 95       	com	r22
 78c:	70 95       	com	r23
 78e:	80 95       	com	r24
 790:	90 95       	com	r25
 792:	9b 01       	movw	r18, r22
 794:	ac 01       	movw	r20, r24
 796:	bd 01       	movw	r22, r26
 798:	cf 01       	movw	r24, r30
 79a:	08 95       	ret

0000079c <__umulhisi3>:
 79c:	a2 9f       	mul	r26, r18
 79e:	b0 01       	movw	r22, r0
 7a0:	b3 9f       	mul	r27, r19
 7a2:	c0 01       	movw	r24, r0
 7a4:	a3 9f       	mul	r26, r19
 7a6:	70 0d       	add	r23, r0
 7a8:	81 1d       	adc	r24, r1
 7aa:	11 24       	eor	r1, r1
 7ac:	91 1d       	adc	r25, r1
 7ae:	b2 9f       	mul	r27, r18
 7b0:	70 0d       	add	r23, r0
 7b2:	81 1d       	adc	r24, r1
 7b4:	11 24       	eor	r1, r1
 7b6:	91 1d       	adc	r25, r1
 7b8:	08 95       	ret

000007ba <itoa>:
 7ba:	45 32       	cpi	r20, 0x25	; 37
 7bc:	51 05       	cpc	r21, r1
 7be:	20 f4       	brcc	.+8      	; 0x7c8 <itoa+0xe>
 7c0:	42 30       	cpi	r20, 0x02	; 2
 7c2:	10 f0       	brcs	.+4      	; 0x7c8 <itoa+0xe>
 7c4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__itoa_ncheck>
 7c8:	fb 01       	movw	r30, r22
 7ca:	10 82       	st	Z, r1
 7cc:	cb 01       	movw	r24, r22
 7ce:	08 95       	ret

000007d0 <__itoa_ncheck>:
 7d0:	bb 27       	eor	r27, r27
 7d2:	4a 30       	cpi	r20, 0x0A	; 10
 7d4:	31 f4       	brne	.+12     	; 0x7e2 <__itoa_ncheck+0x12>
 7d6:	99 23       	and	r25, r25
 7d8:	22 f4       	brpl	.+8      	; 0x7e2 <__itoa_ncheck+0x12>
 7da:	bd e2       	ldi	r27, 0x2D	; 45
 7dc:	90 95       	com	r25
 7de:	81 95       	neg	r24
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__utoa_common>

000007e6 <__utoa_ncheck>:
 7e6:	bb 27       	eor	r27, r27

000007e8 <__utoa_common>:
 7e8:	fb 01       	movw	r30, r22
 7ea:	55 27       	eor	r21, r21
 7ec:	aa 27       	eor	r26, r26
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	aa 1f       	adc	r26, r26
 7f4:	a4 17       	cp	r26, r20
 7f6:	10 f0       	brcs	.+4      	; 0x7fc <__utoa_common+0x14>
 7f8:	a4 1b       	sub	r26, r20
 7fa:	83 95       	inc	r24
 7fc:	50 51       	subi	r21, 0x10	; 16
 7fe:	b9 f7       	brne	.-18     	; 0x7ee <__utoa_common+0x6>
 800:	a0 5d       	subi	r26, 0xD0	; 208
 802:	aa 33       	cpi	r26, 0x3A	; 58
 804:	08 f0       	brcs	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 806:	a9 5d       	subi	r26, 0xD9	; 217
 808:	a1 93       	st	Z+, r26
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	79 f7       	brne	.-34     	; 0x7ec <__utoa_common+0x4>
 80e:	b1 11       	cpse	r27, r1
 810:	b1 93       	st	Z+, r27
 812:	11 92       	st	Z+, r1
 814:	cb 01       	movw	r24, r22
 816:	0c 94 0d 04 	jmp	0x81a	; 0x81a <strrev>

0000081a <strrev>:
 81a:	dc 01       	movw	r26, r24
 81c:	fc 01       	movw	r30, r24
 81e:	67 2f       	mov	r22, r23
 820:	71 91       	ld	r23, Z+
 822:	77 23       	and	r23, r23
 824:	e1 f7       	brne	.-8      	; 0x81e <strrev+0x4>
 826:	32 97       	sbiw	r30, 0x02	; 2
 828:	04 c0       	rjmp	.+8      	; 0x832 <strrev+0x18>
 82a:	7c 91       	ld	r23, X
 82c:	6d 93       	st	X+, r22
 82e:	70 83       	st	Z, r23
 830:	62 91       	ld	r22, -Z
 832:	ae 17       	cp	r26, r30
 834:	bf 07       	cpc	r27, r31
 836:	c8 f3       	brcs	.-14     	; 0x82a <strrev+0x10>
 838:	08 95       	ret

0000083a <_exit>:
 83a:	f8 94       	cli

0000083c <__stop_program>:
 83c:	ff cf       	rjmp	.-2      	; 0x83c <__stop_program>
