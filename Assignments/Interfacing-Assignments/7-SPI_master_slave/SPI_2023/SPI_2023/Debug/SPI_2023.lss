
SPI_2023.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cad  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000786  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000663  00000000  00000000  00001897  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000493  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000364  00000000  00000000  0000247b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  64:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinValue>:
#include "DIO_interface.h" 



void DIO_SetPinValue(u8 port,u8 pin_num,u8 Value){
	if(Value==HIGH){
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_SetPinValue+0x6c>
		switch(port){
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_SetPinValue+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_SetPinValue+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_SetPinValue+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_SetPinValue+0x56>
  7e:	08 95       	ret
			case Port_A:
			SET_BIT(PORTA,pin_num);
  80:	2b b3       	in	r18, 0x1b	; 27
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_SetPinValue+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_SetPinValue+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8b bb       	out	0x1b, r24	; 27
			break;
  94:	08 95       	ret
			case Port_B:
			SET_BIT(PORTB,pin_num);
  96:	28 b3       	in	r18, 0x18	; 24
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinValue+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinValue+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	88 bb       	out	0x18, r24	; 24
			break;
  aa:	08 95       	ret
			case Port_C:
			SET_BIT(PORTC,pin_num);
  ac:	25 b3       	in	r18, 0x15	; 21
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinValue+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinValue+0x48>
  bc:	82 2b       	or	r24, r18
  be:	85 bb       	out	0x15, r24	; 21
			break;
  c0:	08 95       	ret
			case Port_D:
			SET_BIT(PORTD,pin_num);
  c2:	22 b3       	in	r18, 0x12	; 18
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinValue+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinValue+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	82 bb       	out	0x12, r24	; 18
			break;
  d6:	08 95       	ret
		}
	}
	else if(Value==LOW){
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <DIO_SetPinValue+0xde>
		switch(port){
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <DIO_SetPinValue+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_SetPinValue+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <DIO_SetPinValue+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_SetPinValue+0xc8>
  ea:	08 95       	ret
			case Port_A:
			CLR_BIT(PORTA,pin_num);
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinValue+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinValue+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8b bb       	out	0x1b, r24	; 27
			break;
 102:	08 95       	ret
			case Port_B:
			CLR_BIT(PORTB,pin_num);
 104:	28 b3       	in	r18, 0x18	; 24
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinValue+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinValue+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	88 bb       	out	0x18, r24	; 24
			break;
 11a:	08 95       	ret
			case Port_C:
			CLR_BIT(PORTC,pin_num);
 11c:	25 b3       	in	r18, 0x15	; 21
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinValue+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinValue+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	85 bb       	out	0x15, r24	; 21
			break;
 132:	08 95       	ret
			case Port_D:
			CLR_BIT(PORTD,pin_num);
 134:	22 b3       	in	r18, 0x12	; 18
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinValue+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinValue+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	82 bb       	out	0x12, r24	; 18
 14a:	08 95       	ret

0000014c <DIO_SetPinDirection>:
		}
	}
}

void DIO_SetPinDirection(u8 port,u8 pin_num,u8 Direction){
if(Direction==output){
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	a1 f5       	brne	.+104    	; 0x1b8 <DIO_SetPinDirection+0x6c>
	switch(port){
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	89 f0       	breq	.+34     	; 0x176 <DIO_SetPinDirection+0x2a>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_SetPinDirection+0x14>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c9 f0       	breq	.+50     	; 0x18c <DIO_SetPinDirection+0x40>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	11 f1       	breq	.+68     	; 0x1a2 <DIO_SetPinDirection+0x56>
 15e:	08 95       	ret
		case Port_A:
		SET_BIT(DDRA,pin_num);
 160:	2a b3       	in	r18, 0x1a	; 26
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SetPinDirection+0x20>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SetPinDirection+0x1c>
 170:	82 2b       	or	r24, r18
 172:	8a bb       	out	0x1a, r24	; 26
		break;
 174:	08 95       	ret
		case Port_B:
		SET_BIT(DDRB,pin_num);
 176:	27 b3       	in	r18, 0x17	; 23
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPinDirection+0x36>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPinDirection+0x32>
 186:	82 2b       	or	r24, r18
 188:	87 bb       	out	0x17, r24	; 23
		break;
 18a:	08 95       	ret
		case Port_C:
		SET_BIT(DDRC,pin_num);
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SetPinDirection+0x4c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SetPinDirection+0x48>
 19c:	82 2b       	or	r24, r18
 19e:	84 bb       	out	0x14, r24	; 20
		break;
 1a0:	08 95       	ret
		case Port_D:
		SET_BIT(DDRD,pin_num);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPinDirection+0x62>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPinDirection+0x5e>
 1b2:	82 2b       	or	r24, r18
 1b4:	81 bb       	out	0x11, r24	; 17
		break;
 1b6:	08 95       	ret
	}
}	
else if(Direction==input){
 1b8:	41 11       	cpse	r20, r1
 1ba:	37 c0       	rjmp	.+110    	; 0x22a <DIO_SetPinDirection+0xde>
switch(port){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 f0       	breq	.+36     	; 0x1e4 <DIO_SetPinDirection+0x98>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <DIO_SetPinDirection+0x80>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	d9 f0       	breq	.+54     	; 0x1fc <DIO_SetPinDirection+0xb0>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	29 f1       	breq	.+74     	; 0x214 <DIO_SetPinDirection+0xc8>
 1ca:	08 95       	ret
	case Port_A:
	CLR_BIT(DDRA,pin_num);
 1cc:	2a b3       	in	r18, 0x1a	; 26
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_SetPinDirection+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_SetPinDirection+0x88>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	8a bb       	out	0x1a, r24	; 26
	break;
 1e2:	08 95       	ret
	case Port_B:
	CLR_BIT(DDRB,pin_num);
 1e4:	27 b3       	in	r18, 0x17	; 23
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPinDirection+0xa4>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPinDirection+0xa0>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	87 bb       	out	0x17, r24	; 23
	break;
 1fa:	08 95       	ret
	case Port_C:
	CLR_BIT(DDRC,pin_num);
 1fc:	24 b3       	in	r18, 0x14	; 20
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinDirection+0xbc>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinDirection+0xb8>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	84 bb       	out	0x14, r24	; 20
	break;
 212:	08 95       	ret
	case Port_D:
	CLR_BIT(DDRD,pin_num);
 214:	21 b3       	in	r18, 0x11	; 17
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPinDirection+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPinDirection+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	81 bb       	out	0x11, r24	; 17
 22a:	08 95       	ret

0000022c <main>:


int main(void)
{
	//DIO_SetPinDirection(Port_B,Pin_0,output); //select slave 1
	SPI_INIT_MASTER();
 22c:	0e 94 45 01 	call	0x28a	; 0x28a <SPI_INIT_MASTER>
	
	
    /* Replace with your application code */
    while (1) 
    {
		DIO_SetPinValue(Port_B,Pin_4,LOW);
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	64 e0       	ldi	r22, 0x04	; 4
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
		dum=SPI_TR_RC(10);
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SPI_TR_RC>
		DIO_SetPinValue(Port_B,Pin_4,HIGH);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	84 e3       	ldi	r24, 0x34	; 52
 24e:	9c e0       	ldi	r25, 0x0C	; 12
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x24>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x2e>
 25a:	00 00       	nop
		_delay_ms(500);
		
		DIO_SetPinValue(Port_B,Pin_4,LOW);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	64 e0       	ldi	r22, 0x04	; 4
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
		dum=SPI_TR_RC(20);
 266:	84 e1       	ldi	r24, 0x14	; 20
 268:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SPI_TR_RC>
		DIO_SetPinValue(Port_B,Pin_4,HIGH);
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	64 e0       	ldi	r22, 0x04	; 4
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	84 e3       	ldi	r24, 0x34	; 52
 27a:	9c e0       	ldi	r25, 0x0C	; 12
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x50>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x5a>
 286:	00 00       	nop
 288:	d3 cf       	rjmp	.-90     	; 0x230 <main+0x4>

0000028a <SPI_INIT_MASTER>:
	
	//Sample at leading edge >> sample= receive
	CLR_BIT(SPCR,SPCR_CPHA_PIN);
	
	//SPI enable
	SET_BIT(SPCR,SPCR_SPE_PIN);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	65 e0       	ldi	r22, 0x05	; 5
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	66 e0       	ldi	r22, 0x06	; 6
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPinDirection>
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	64 e0       	ldi	r22, 0x04	; 4
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
 2bc:	8d b1       	in	r24, 0x0d	; 13
 2be:	8f 77       	andi	r24, 0x7F	; 127
 2c0:	8d b9       	out	0x0d, r24	; 13
 2c2:	8d b1       	in	r24, 0x0d	; 13
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	8d b9       	out	0x0d, r24	; 13
 2c8:	8d b1       	in	r24, 0x0d	; 13
 2ca:	80 61       	ori	r24, 0x10	; 16
 2cc:	8d b9       	out	0x0d, r24	; 13
 2ce:	8d b1       	in	r24, 0x0d	; 13
 2d0:	87 7f       	andi	r24, 0xF7	; 247
 2d2:	8d b9       	out	0x0d, r24	; 13
 2d4:	8d b1       	in	r24, 0x0d	; 13
 2d6:	8b 7f       	andi	r24, 0xFB	; 251
 2d8:	8d b9       	out	0x0d, r24	; 13
 2da:	8d b1       	in	r24, 0x0d	; 13
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	8d b9       	out	0x0d, r24	; 13
 2e0:	8d b1       	in	r24, 0x0d	; 13
 2e2:	8d 7f       	andi	r24, 0xFD	; 253
 2e4:	8d b9       	out	0x0d, r24	; 13
 2e6:	8e b1       	in	r24, 0x0e	; 14
 2e8:	8e 7f       	andi	r24, 0xFE	; 254
 2ea:	8e b9       	out	0x0e, r24	; 14
 2ec:	8d b1       	in	r24, 0x0d	; 13
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	8d b9       	out	0x0d, r24	; 13
 2f2:	08 95       	ret

000002f4 <SPI_TR_RC>:
}
u8 SPI_TR_RC (u8 data){
	//send data
	SPDR=data;
 2f4:	8f b9       	out	0x0f, r24	; 15
	//wait till data is sent
	while(GET_BIT(SPSR,SPSR_SPIF)==0);
 2f6:	77 9b       	sbis	0x0e, 7	; 14
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <SPI_TR_RC+0x2>
	//return received data
	return SPDR;
 2fa:	8f b1       	in	r24, 0x0f	; 15
	
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
