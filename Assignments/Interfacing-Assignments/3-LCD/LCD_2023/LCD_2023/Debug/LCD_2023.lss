
LCD_2023.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013c8  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000899  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e8  00000000  00000000  00002179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058a  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c5f  00000000  00000000  0000319e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003dfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  64:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinValue>:
		break;
		default:
		break;
		
	}
}
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_SetPinValue+0x6c>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_SetPinValue+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_SetPinValue+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_SetPinValue+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_SetPinValue+0x56>
  7e:	08 95       	ret
  80:	2b b3       	in	r18, 0x1b	; 27
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_SetPinValue+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_SetPinValue+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8b bb       	out	0x1b, r24	; 27
  94:	08 95       	ret
  96:	28 b3       	in	r18, 0x18	; 24
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPinValue+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPinValue+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret
  ac:	25 b3       	in	r18, 0x15	; 21
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinValue+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinValue+0x48>
  bc:	82 2b       	or	r24, r18
  be:	85 bb       	out	0x15, r24	; 21
  c0:	08 95       	ret
  c2:	22 b3       	in	r18, 0x12	; 18
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinValue+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinValue+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	08 95       	ret
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <DIO_SetPinValue+0xde>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <DIO_SetPinValue+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_SetPinValue+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <DIO_SetPinValue+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_SetPinValue+0xc8>
  ea:	08 95       	ret
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinValue+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinValue+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8b bb       	out	0x1b, r24	; 27
 102:	08 95       	ret
 104:	28 b3       	in	r18, 0x18	; 24
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinValue+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinValue+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret
 11c:	25 b3       	in	r18, 0x15	; 21
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinValue+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinValue+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	85 bb       	out	0x15, r24	; 21
 132:	08 95       	ret
 134:	22 b3       	in	r18, 0x12	; 18
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinValue+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinValue+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	82 bb       	out	0x12, r24	; 18
 14a:	08 95       	ret

0000014c <DIO_SetPortValue>:

void DIO_SetPortValue(u8 port, u8 Value){ //11111111==255
	switch(port){
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	41 f0       	breq	.+16     	; 0x160 <DIO_SetPortValue+0x14>
 150:	28 f0       	brcs	.+10     	; 0x15c <DIO_SetPortValue+0x10>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	39 f0       	breq	.+14     	; 0x164 <DIO_SetPortValue+0x18>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	39 f0       	breq	.+14     	; 0x168 <DIO_SetPortValue+0x1c>
 15a:	08 95       	ret
		case Port_A:
		PORTA=Value;
 15c:	6b bb       	out	0x1b, r22	; 27
		break;
 15e:	08 95       	ret
		case Port_B:
		PORTB=Value;
 160:	68 bb       	out	0x18, r22	; 24
		break;
 162:	08 95       	ret
		case Port_C:
		PORTC=Value;
 164:	65 bb       	out	0x15, r22	; 21
		break;
 166:	08 95       	ret
		case Port_D:
		PORTD=Value;
 168:	62 bb       	out	0x12, r22	; 18
 16a:	08 95       	ret

0000016c <DIO_SetPortDirection>:
		
	}
}

void DIO_SetPortDirection(u8 port, u8 Direction){
	switch(port){
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	41 f0       	breq	.+16     	; 0x180 <DIO_SetPortDirection+0x14>
 170:	28 f0       	brcs	.+10     	; 0x17c <DIO_SetPortDirection+0x10>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	39 f0       	breq	.+14     	; 0x184 <DIO_SetPortDirection+0x18>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	39 f0       	breq	.+14     	; 0x188 <DIO_SetPortDirection+0x1c>
 17a:	08 95       	ret
		case Port_A:
		DDRA=Direction;
 17c:	6a bb       	out	0x1a, r22	; 26
		break;
 17e:	08 95       	ret
		case Port_B:
		DDRB=Direction;
 180:	67 bb       	out	0x17, r22	; 23
		break;
 182:	08 95       	ret
		case Port_C:
		DDRC=Direction;
 184:	64 bb       	out	0x14, r22	; 20
		break;
 186:	08 95       	ret
		case Port_D:
		DDRD=Direction;
 188:	61 bb       	out	0x11, r22	; 17
 18a:	08 95       	ret

0000018c <LCD_Send_Command>:
#include "DIO_interface.h"
#include "LCD_Config.h"
#include "avr/delay.h"


void LCD_Send_Command (u8 command){
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
	/* set RS as LOW */
	DIO_SetPinValue(CTRL_PORT,RS_Pin,LOW);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	/* set RW as LOW to Write */
	DIO_SetPinValue(CTRL_PORT,RW_Pin,LOW);
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	
	// send command to data port
	DIO_SetPortValue(Data_Port,command);
 1a4:	6c 2f       	mov	r22, r28
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPortValue>
	
	//set enable pulse 
	DIO_SetPinValue(CTRL_PORT,Enable_Pin,HIGH);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8d ee       	ldi	r24, 0xED	; 237
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_Send_Command+0x2e>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_Send_Command+0x34>
 1c0:	00 00       	nop
	_delay_ms(3);
	DIO_SetPinValue(CTRL_PORT,Enable_Pin,LOW);
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	
	
	
}
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <LCD_Send_Data>:
void LCD_Send_Data (u8 Data){
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
	/* set RS as HIGH */
	DIO_SetPinValue(CTRL_PORT,RS_Pin,HIGH);
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	/* set RW as LOW to Write */
	DIO_SetPinValue(CTRL_PORT,RW_Pin,LOW);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	
	//send data to data port
	DIO_SetPortValue(Data_Port,Data);
 1e8:	6c 2f       	mov	r22, r28
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_SetPortValue>
	//set enable pulse
	DIO_SetPinValue(CTRL_PORT,Enable_Pin,HIGH);
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
 1fa:	8d ee       	ldi	r24, 0xED	; 237
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_Send_Data+0x2e>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_Send_Data+0x34>
 204:	00 00       	nop
	_delay_ms(3);
	DIO_SetPinValue(CTRL_PORT,Enable_Pin,LOW);
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinValue>
	
	
}
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <LCD_Init>:
 214:	8f e0       	ldi	r24, 0x0F	; 15
 216:	97 e2       	ldi	r25, 0x27	; 39
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Init+0x4>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Init+0xa>
 21e:	00 00       	nop
void LCD_Init(void){
	
	_delay_ms(40);
	
	//function set 
	LCD_Send_Command (0b00111111);
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	9d e0       	ldi	r25, 0x0D	; 13
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x14>
 22c:	00 00       	nop
	
	_delay_us(40);
	
	//On-off
	LCD_Send_Command (0b00001100);
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Send_Command>
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Init+0x22>
 23a:	00 00       	nop
	_delay_us(40);
	
	//clear
	LCD_Send_Command (0b00000001);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	83 ef       	ldi	r24, 0xF3	; 243
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_Init+0x32>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_Init+0x38>
 24c:	00 00       	nop
	_delay_ms(2);
	
	//entry set mode
	LCD_Send_Command(0b00000110);
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Send_Command>
 254:	8f e0       	ldi	r24, 0x0F	; 15
 256:	97 e2       	ldi	r25, 0x27	; 39
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_Init+0x44>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_Init+0x4a>
 25e:	00 00       	nop
 260:	08 95       	ret

00000262 <GOTOXY>:
	
	
}
void GOTOXY(u8 x,u8 y){ //(1,4)
	u8 address=0;
	if(x==0){
 262:	88 23       	and	r24, r24
 264:	29 f0       	breq	.+10     	; 0x270 <GOTOXY+0xe>
		address=y;
	}
	else if(x==1){
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	11 f4       	brne	.+4      	; 0x26e <GOTOXY+0xc>
		address=0x40+y; //44=0b01000100
 26a:	60 5c       	subi	r22, 0xC0	; 192
 26c:	01 c0       	rjmp	.+2      	; 0x270 <GOTOXY+0xe>
	_delay_ms(40);
	
	
}
void GOTOXY(u8 x,u8 y){ //(1,4)
	u8 address=0;
 26e:	60 e0       	ldi	r22, 0x00	; 0
	}
	else if(x==1){
		address=0x40+y; //44=0b01000100
	}
	//DDram address = 0b10000000 //80
	LCD_Send_Command(0b10000000+address);
 270:	80 e8       	ldi	r24, 0x80	; 128
 272:	86 0f       	add	r24, r22
 274:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Send_Command>
 278:	08 95       	ret

0000027a <LCD_Clear>:
	
}

void LCD_Clear(){
	LCD_Send_Command(0b00000001);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Send_Command>
 280:	83 ef       	ldi	r24, 0xF3	; 243
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Clear+0xa>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_Clear+0x10>
 28a:	00 00       	nop
	_delay_ms(2);
	LCD_Send_Command(0b10000000);
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Send_Command>
 292:	08 95       	ret

00000294 <main>:
#include "LCD_Config.h"
#include "LCD_Interface.h"

int main(void)
{
	DIO_SetPortDirection(Port_C,Port_output);
 294:	6f ef       	ldi	r22, 0xFF	; 255
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPortDirection>
	DIO_SetPortDirection(Port_B,Port_output);
 29c:	6f ef       	ldi	r22, 0xFF	; 255
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPortDirection>
	LCD_Init();
 2a4:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Init>
	 u8 x=0;
	 u8 y=0;
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
int main(void)
{
	DIO_SetPortDirection(Port_C,Port_output);
	DIO_SetPortDirection(Port_B,Port_output);
	LCD_Init();
	 u8 x=0;
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <main+0x1e>
		y+=1;
		
		
		LCD_Clear();
		
		if(y==15) y=0;
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	d0 2f       	mov	r29, r16
	
    /* Replace with your application code */
    while (1) 
    {
	
		LCD_Clear();
 2b2:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Clear>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	9c e0       	ldi	r25, 0x0C	; 12
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x28>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x32>
 2c6:	00 00       	nop
		_delay_ms(500);
		GOTOXY(x,y);
 2c8:	6c 2f       	mov	r22, r28
 2ca:	8d 2f       	mov	r24, r29
 2cc:	0e 94 31 01 	call	0x262	; 0x262 <GOTOXY>
		LCD_Send_Data('H');
 2d0:	88 e4       	ldi	r24, 0x48	; 72
 2d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Send_Data>
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	84 e3       	ldi	r24, 0x34	; 52
 2da:	9c e0       	ldi	r25, 0x0C	; 12
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x48>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x52>
 2e6:	00 00       	nop
		_delay_ms(500);
		x=!x;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	d1 11       	cpse	r29, r1
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 2f       	mov	r16, r24
		y+=1;
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	6c 0f       	add	r22, r28
		GOTOXY(x,y);
 2f4:	0e 94 31 01 	call	0x262	; 0x262 <GOTOXY>
		LCD_Send_Data('a');
 2f8:	81 e6       	ldi	r24, 0x61	; 97
 2fa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Send_Data>
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	84 e3       	ldi	r24, 0x34	; 52
 302:	9c e0       	ldi	r25, 0x0C	; 12
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x70>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x7a>
 30e:	00 00       	nop
		_delay_ms(500);
		x=!x;
 310:	11 e0       	ldi	r17, 0x01	; 1
 312:	d1 11       	cpse	r29, r1
 314:	01 c0       	rjmp	.+2      	; 0x318 <main+0x84>
 316:	10 e0       	ldi	r17, 0x00	; 0
		y+=1;
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	6c 0f       	add	r22, r28
		GOTOXY(x,y);
 31c:	81 2f       	mov	r24, r17
 31e:	0e 94 31 01 	call	0x262	; 0x262 <GOTOXY>
		LCD_Send_Data('i');
 322:	89 e6       	ldi	r24, 0x69	; 105
 324:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Send_Data>
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	84 e3       	ldi	r24, 0x34	; 52
 32c:	9c e0       	ldi	r25, 0x0C	; 12
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x9a>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0xa4>
 338:	00 00       	nop
		_delay_ms(500);
		x=!x;
		y+=1;
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	6c 0f       	add	r22, r28
		GOTOXY(x,y);
 33e:	80 2f       	mov	r24, r16
 340:	0e 94 31 01 	call	0x262	; 0x262 <GOTOXY>
		LCD_Send_Data('d');
 344:	84 e6       	ldi	r24, 0x64	; 100
 346:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Send_Data>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	84 e3       	ldi	r24, 0x34	; 52
 34e:	9c e0       	ldi	r25, 0x0C	; 12
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0xbc>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0xc6>
 35a:	00 00       	nop
		_delay_ms(500);
		x=!x;
		y+=1;
 35c:	64 e0       	ldi	r22, 0x04	; 4
 35e:	6c 0f       	add	r22, r28
		GOTOXY(x,y);
 360:	81 2f       	mov	r24, r17
 362:	0e 94 31 01 	call	0x262	; 0x262 <GOTOXY>
	    LCD_Send_Data('y');
 366:	89 e7       	ldi	r24, 0x79	; 121
 368:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_Send_Data>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	84 e3       	ldi	r24, 0x34	; 52
 370:	9c e0       	ldi	r25, 0x0C	; 12
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0xde>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0xe8>
 37c:	00 00       	nop
		_delay_ms(500);
		x=!x;
		y+=1;
 37e:	cb 5f       	subi	r28, 0xFB	; 251
		
		
		LCD_Clear();
 380:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Clear>
		
		if(y==15) y=0;
 384:	cf 30       	cpi	r28, 0x0F	; 15
 386:	09 f0       	breq	.+2      	; 0x38a <main+0xf6>
 388:	93 cf       	rjmp	.-218    	; 0x2b0 <main+0x1c>
 38a:	91 cf       	rjmp	.-222    	; 0x2ae <main+0x1a>

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
